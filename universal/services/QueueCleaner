#!/usr/bin/with-contenv bash
scriptName="QueueCleaner"

#### Import Settings
source /config/extended.conf
#### Import Functions
source /config/extended/functions
#### Create Log File
logfileSetup
#### Check Arr App
getArrAppInfo
verifyApiAccess

verifyConfig () {
    #### Import Settings
    source /config/extended.conf

    if [ "$enableQueueCleaner" != "true" ]; then
        log "Script is not enabled, enable by setting enableQueueCleaner to \"true\" by modifying the \"/config/extended.conf\" config file..."
        log "Sleeping (infinity)"
        sleep infinity
    fi

    if [ -z "$queueCleanerScriptInterval" ]; then
        queueCleanerScriptInterval="15m"
    fi

    if [ -z "$blacklistStalledDownloads" ]; then
        blacklistStalledDownloads="false"
    fi
}

deleteItemFromQueue() {
    local queueId=$1
    local itemTitle=$(echo "$arrQueueData" | jq -r "select(.id==$queueId) | .title")
    log "$queueId ($itemTitle) :: Removing from $arrName..."
    curl -sX DELETE "$arrUrl/api/$arrApiVersion/queue/$queueId?removeFromClient=true&blocklist=true&apikey=${arrApiKey}"
}

QueueCleanerProcess () {
    local arrQueueData arrQueueCompletedIds arrQueueFailedIds arrQueuedIds
    local arrQueueIdsCompletedCount arrQueueIdsFailedCount arrQueueIdsCount

    case "$arrPort" in
        "8989") 
            arrQueueData="$(curl -s "$arrUrl/api/v3/queue?page=1&pagesize=200&sortDirection=descending&sortKey=progress&includeUnknownSeriesItems=true&apikey=${arrApiKey}" | jq -r .records[])"
            ;;
        "7878")
            arrQueueData="$(curl -s "$arrUrl/api/v3/queue?page=1&pagesize=200&sortDirection=descending&sortKey=progress&includeUnknownMovieItems=true&apikey=${arrApiKey}" | jq -r .records[])"
            ;;
        "8686")
            arrQueueData="$(curl -s "$arrUrl/api/v1/queue?page=1&pagesize=200&sortDirection=descending&sortKey=progress&includeUnknownArtistItems=true&apikey=${arrApiKey}" | jq -r .records[])"
            ;;
        "8787")
            arrQueueData="$(curl -s "$arrUrl/api/v1/queue?page=1&pagesize=200&sortDirection=descending&sortKey=progress&includeUnknownAuthorItems=true&apikey=${arrApiKey}" | jq -r .records[])"
            ;;
    esac

    arrQueueCompletedIds=$(echo "$arrQueueData" | jq -r 'select(.status=="completed") | select(.trackedDownloadStatus=="warning") | .id')
    arrQueueIdsCompletedCount=$(echo "$arrQueueData" | jq -r 'select(.status=="completed") | select(.trackedDownloadStatus=="warning") | .id' | wc -l)
    arrQueueFailedIds=$(echo "$arrQueueData" | jq -r 'select(.status=="failed") | .id')
    arrQueueIdsFailedCount=$(echo "$arrQueueData" | jq -r 'select(.status=="failed") | .id' | wc -l)
    arrQueuedIds=$(echo "$arrQueueCompletedIds"; echo "$arrQueueFailedIds")
    arrQueueIdsCount=$(( arrQueueIdsCompletedCount + arrQueueIdsFailedCount ))

    if [ $arrQueueIdsCount -eq 0 ]; then
        log "No items in queue to clean up"
    else
        for queueId in $(echo $arrQueuedIds); do
            deleteItemFromQueue $queueId
        done
    fi

    # Clear stalled downloads
    stalledItems=$(echo "$arrQueueData" | jq -r 'select(.status=="stalled") | .id')
    for stalledId in $stalledItems; do
        stalledItemTitle=$(echo "$arrQueueData" | jq -r "select(.id==$stalledId) | .title")
        log "$stalledId ($stalledItemTitle) :: Removing Stalled Queue Item..."
        deleteItemFromQueue $stalledId
    done
}

for (( ; ; )); do
    logfileSetup
    verifyConfig
    log "Starting..."
    QueueCleanerProcess
    log "Sleeping $queueCleanerScriptInterval..."
    sleep $queueCleanerScriptInterval
done

exit